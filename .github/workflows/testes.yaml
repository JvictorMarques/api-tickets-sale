name: Pipeline de Testes Unitários, Integração e Cobertura de Código
on:
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/testes.yaml
      - app/src/**
env:
  JAVA_VERSION: 21
  JAVA_DISTRIBUTION: 'zulu'
  JACOCO: jacoco-report
jobs:
  unit-test:
    name: Executando testes unitários com JUnit
    runs-on: ubuntu-latest
    steps:
      - name: Verificando o código
        uses: actions/checkout@v5

      - name: Configurando o JDK
        uses: actions/setup-java@v5
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
          cache-dependency-path: ./app/pom.xml

      - name: Gerar relatório de cobertura de código
        working-directory: ./app
        run: mvn test jacoco:report -Dgroups=unit
      - name: Salvar relatório Jacoco
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.JACOCO }}
          path: ./app/target/site/jacoco/jacoco.xml

  integration-test:
    name: Executando testes de integração com JUnit
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ticket_sales
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user -d ticket_sales"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Verificando o código
        uses: actions/checkout@v5

      - name: Configurando o JDK
        uses: actions/setup-java@v5
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
          cache-dependency-path: ./app/pom.xml

      - name: Executar testes de integração
        working-directory: ./app
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ticket_sales
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: password
        run: mvn test -Dgroups=integration
  sonarqube:
    name: Executando análise de código com SonarQube
    needs: [unit-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Configurando o JDK
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Baixar relatório Jacoco
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.JACOCO }}
          path: ./app/target/site/jacoco/
      - name: Construindo e analisando o projeto
        working-directory: ./app
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B sonar:sonar -Dsonar.projectKey=JvictorMarques_api-tickets-sale -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

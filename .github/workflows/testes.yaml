name: Pipeline de Testes Unitários, Integração e Cobertura de Código
on:
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/testes.yaml
      - app/src/**
env:
  COVERAGE: coverage
jobs:
  unit-test:
    name: Executando testes unitários com JUnit
    runs-on: ubuntu-latest
    steps:
      - name: Verificando o código
        uses: actions/checkout@v5

      - name: Configurando o JDK
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Baixar as dependências do Maven
        working-directory: ./app
        run: mvn dependency:go-offline

      - name: Gerar relatório de cobertura de código
        working-directory: ./app
        run: mvn test jacoco:report -Dgroups=unit

      - name: Adicionar relatório de cobertura como artefato
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COVERAGE }}
          path: ./app/target/site/jacoco/jacoco.xml
  integration-test:
    name: Executando testes de integração com JUnit
    runs-on: ubuntu-latest
    steps:
      - name: Verificando o código
        uses: actions/checkout@v4

      - name: Configurando o JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Baixar as dependências do Maven
        working-directory: ./app
        run: mvn dependency:go-offline

      - name: Executar testes unitários
        working-directory: ./app
        run: mvn test -Dgroups=integration
  sonarqube:
    name: Executando análise de código com SonarQube
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarcloud-github-action@v5.0.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: app/src
